
import java.awt.FileDialog;
import java.awt.Frame;
import javax.swing.table.*;
import javax.swing.*;
import java.awt.event.*;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Vector;
import mieval.ctes_eval;
import mieval.evaluador;
import mieval.tipo.variable;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * panelCalc.java
 *
 * Created on 10-mar-2011, 12:41:25
 */

/**
 *
 * @author usuario
 */
public class panelCalc extends javax.swing.JPanel {

    /** Creates new form panelCalc */
    public panelCalc() {
        initComponents();
        DefaultTableModel model = (DefaultTableModel) this.funciones.getModel();
         String s="+ , 3+3->6 | 'ho'+'la'->'hola' \n++ , pre/post-incremento: ++a"
    +" | a++\n- , resta: 3- 3->0 | 'hola'-'la'->'hola'\n-- , pre/post-"
    +"decremento: --a | a--\n>= , mayor o igual: 3>=2->true\n"
    +"<= , menor o igual: 3<=2->false\nmod , módulo: 4 mod 3->1\n% , idem"
    +" anterior\nnot , negación lógica: not true->false | not false->true\n!"
    +" , idem anterior\n"
    +"or , 'o' lógico: true or false->true | false or false->false\n| , idem"
    +" anterior\n|| , idem anterior\n!= , distinto: 3!=3->false\n<> , idem"
    +" anterior\n== , comprobación igualdad: 4==5->false | 5==5->true\n"
    +"? , ultimo valor calculado: ? + 3\nabs , valor absoluto: abs(-5.5)->5.5"
    +"\nacos , arcocoseno: acos 0->pi/2\nand | && | & , 'y' logico: x and y\n"
    +"asen , arcoseno: asen 1->pi/2\n"
    +"atan , arcotangente: atan 1->pi/4\natan2 , atan2(3;4)\nceil , siguiente"
    +" entero: ceil 3.45->4\ncos , coseno: cos 0\ncosh , coseno hiperbolico: "
    +"cosh x\nderiv , derivada: deriv('x^3')\n"
    +"derivada , derivada: deriv('x^3')\ndim , crear matrices: dim a[3;3;3]\n"
    +"div , division entera: 4 div 3\ne , 2.718281828459045\neval , eval('3+5')"
    +"->8\nexec , ejecuta programa: exec('prg';a;b;c)\n"
    +"exp , exponencial: exp(2)->e^2\nfalse , falso: 4!=4->false\nfloor , "
    +"anterior entero: floor(4.5)->4\n"
    +"for , for(<lista-coma-insts.>;<condicion>;<lista-coma-insts>) { <lista-"
    +"instrs.> }\nif , if (<condicion>) { <lista-insts.> } [elseif { "
    +"<lista-insts.> }...] [else {<lista-insts.>}]\n"
    +"iif , funcion condicional: iif(3>5;3;5)->5\nint , parte entera: int 3.5"
    +" ->3\nintegral , integral definida: integral('x^2';0;2)->9\nlen , "
    +"longitud elemento: len('hola')->4\n"
    +"ln , logaritmo neperiano: ln e->1\nlog , logaritmo base: log(2;2^3)->3\n"
    +"pi , 3.141592653589793\nsen , seno: sen(pi/2)->1\nsenh , seno"
    +" hiperbólico: senh 1-> 1.1752011936\n"
    +"simp , simplifica expresiones: simp('x*x*x*x*x*x*x')->x^7\nsqrt , raíz"
    +" cuadrada: sqrt 2->1.4142135624\nsubstr , subcadena: substr('hola';0;1)"
    +"->'ho'\ntan , tangente: tan(pi/4)->1\n"
    +"tanh , tangente hiperbólica: tanh 1->0.761594156\ntolower , convierte"
    +" minúsculas: tolower('FRAN')->'fran'\ntoupper , convierte mayúsculas: "
    +"toupper('fran')->'FRAN'\n"
    +"true , verdadero: 3==4->true\ntype , tipo de la variable: type('hola')"
    +"->'S'\nwhile , while(<condicion>) { <lista-insts.> }\n";
        java.util.StringTokenizer st=new java.util.StringTokenizer(s,"\n");
        while (st.hasMoreTokens()) {
           model.addRow(st.nextToken().split(","));
        }
    historicoAdd.setToolTipText("Sustituir Expresión por Selección");
    calcular.setToolTipText("Evaluar la expresi¢n");
    borrarExpresion.setToolTipText("Limpia el campo de expresi¢n");
    borrarResultado.setToolTipText("Limpia el campo de resultado");
    salvarVariables.setToolTipText("Salva todas las variables de la calculadora");
    cargarVariables.setToolTipText("Carga las variables previamente salvadas de un fichero");
    historicoConcatenar.setToolTipText("A¤adir a la expresi¢n existente");
    funcionesConcatenar.setToolTipText("A¤adir a la expresi¢n existente");
    funcionesAdd.setToolTipText("Sustituir expresi¢n existente por selecci¢n");

        DefaultTableModel model2 = (DefaultTableModel) this.variables.getModel();
        /*for(int i=0;i<=20;i++) {
            //this.tablaFunciones.getModel().addRow(new java.lang.String[]{"func"+i, "f"+i});
            //this.tablaFunciones.add
            model.addRow(new String[]{"func"+i, "f"+i});
            model2.addRow(new String[]{"func"+i, "f"+i});
            //historico.setText(historico.getText()+"\nLínea: "+i);
            ((DefaultTableModel) historico.getModel()).addRow(new String[]{"Comando: "+i});
            ((DefaultTableModel) salidaProgramas.getModel()).addRow(new String[]{"Programa: "+i});
            //salidaProgramas.setText(salidaProgramas.getText()+"\nLínea: "+i);
        }*/
        expresion.grabFocus();
        expresion.requestFocus();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        funciones = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        variables = new javax.swing.JTable();
        funcionesAdd = new javax.swing.JButton();
        funcionesConcatenar = new javax.swing.JButton();
        actualizarVariables = new javax.swing.JCheckBox();
        historicoConcatenar = new javax.swing.JButton();
        historicoAdd = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        salidaProgramas = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        historico = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        expresion = new javax.swing.JTextField();
        resultado = new javax.swing.JTextField();
        calcular = new javax.swing.JButton();
        borrarResultado = new javax.swing.JButton();
        borrarExpresion = new javax.swing.JButton();
        salvarVariables = new javax.swing.JButton();
        cargarVariables = new javax.swing.JButton();

        funciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Función/Operador", "Ejemplo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(funciones);
        funciones.getColumnModel().getColumn(1).setHeaderValue("Ejemplo");

        variables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Variable", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(variables);

        funcionesAdd.setText(">");
        funcionesAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcionesAddActionPerformed(evt);
            }
        });

        funcionesConcatenar.setText(">>");
        funcionesConcatenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcionesConcatenarActionPerformed(evt);
            }
        });

        actualizarVariables.setText("Actualizar variables (enlentece ejecución)");

        historicoConcatenar.setText(">>");
        historicoConcatenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historicoConcatenarActionPerformed(evt);
            }
        });

        historicoAdd.setText(">");
        historicoAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historicoAddActionPerformed(evt);
            }
        });

        salidaProgramas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Salida de Programas"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(salidaProgramas);

        historico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Histórico de Comandos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(historico);

        jLabel3.setText("Expresión:");

        jLabel4.setText("Resultado:");

        expresion.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        expresion.setMaximumSize(new java.awt.Dimension(1100, 1100));
        expresion.setPreferredSize(new java.awt.Dimension(700, 38));
        expresion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expresionActionPerformed(evt);
            }
        });
        expresion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expresionKeyPressed(evt);
            }
        });

        resultado.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        resultado.setMaximumSize(new java.awt.Dimension(1280, 1280));
        resultado.setPreferredSize(new java.awt.Dimension(700, 38));

        calcular.setText("Calcular");
        calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularActionPerformed(evt);
            }
        });

        borrarResultado.setText("Borrar Resultado");
        borrarResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarResultadoActionPerformed(evt);
            }
        });

        borrarExpresion.setText("Borrar Expresión");
        borrarExpresion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarExpresionActionPerformed(evt);
            }
        });

        salvarVariables.setText("Salvar Variables");
        salvarVariables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarVariablesActionPerformed(evt);
            }
        });

        cargarVariables.setText("Cargar Variables");
        cargarVariables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarVariablesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(historicoAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(historicoConcatenar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(funcionesAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(funcionesConcatenar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actualizarVariables, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(calcular)
                        .addGap(25, 25, 25)
                        .addComponent(borrarResultado)
                        .addGap(28, 28, 28)
                        .addComponent(borrarExpresion)
                        .addGap(28, 28, 28)
                        .addComponent(salvarVariables)
                        .addGap(31, 31, 31)
                        .addComponent(cargarVariables))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(resultado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
                        .addComponent(expresion, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcionesConcatenar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(funcionesAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actualizarVariables, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(historicoConcatenar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(historicoAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(expresion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargarVariables)
                    .addComponent(salvarVariables)
                    .addComponent(borrarExpresion)
                    .addComponent(borrarResultado)
                    .addComponent(calcular))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void funcionesConcatenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcionesConcatenarActionPerformed
        expresion.setText(expresion.getText()+funciones.getModel().getValueAt(funciones.getSelectedRow(), 0).toString().trim());
    }//GEN-LAST:event_funcionesConcatenarActionPerformed

    private void historicoConcatenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historicoConcatenarActionPerformed
        expresion.setText(expresion.getText()+historico.getModel().getValueAt(historico.getSelectedRow(), 0).toString().trim());
    }//GEN-LAST:event_historicoConcatenarActionPerformed

    private void borrarExpresionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarExpresionActionPerformed
        expresion.setText("");
}//GEN-LAST:event_borrarExpresionActionPerformed

    private void borrarResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarResultadoActionPerformed
        resultado.setText("");
}//GEN-LAST:event_borrarResultadoActionPerformed

   private void funcionesAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcionesAddActionPerformed
      expresion.setText(funciones.getModel().getValueAt(funciones.getSelectedRow(), 0).toString().trim());
   }//GEN-LAST:event_funcionesAddActionPerformed

   private void expresionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expresionActionPerformed
     String s=expresion.getText();
     if (s.equalsIgnoreCase("")) {
        return;
     }
     variable r=new variable();
     if (s.charAt(s.length()-1)=='\n') {
        s=s.substring(0,s.length()-1);
     }
     expresion.setText("");
     if (s.length()>0) {
        resultado.setText("");
        r=eval.programa(s+(char)ctes_eval.FIN);
        if (r!=null) {
           resultado.setText(r.StringValue());
           if (r.tipo!='E') { // si no la expresión fue válida
              int n=historico.getRowCount();
              int i;
              for(i=0; i<n; i++) {
                 if (s.equalsIgnoreCase(((DefaultTableModel)historico.getModel()).getValueAt(i, 0).toString())) {
                    ((DefaultTableModel)historico.getModel()).removeRow(i);  
                    break;
                 }
              }
              ((DefaultTableModel)historico.getModel()).addRow(new String[]{s});
              int numItems=((DefaultTableModel)historico.getModel()).getRowCount();
              historico.setRowSelectionInterval(numItems-1,numItems-1);
              //historico.select(eval.hist.getItemCount()-1);
              //Rectangle rect=new Rectangle(historico.getVisibleRect());
              //rect.setBounds(rect.x,rect.y+100,rect.width,rect.height+100);
              //historico.scrollRectToVisible(rect);
              //historico.jlista.ensureIndexIsVisible(historico.getItemCount()-1);
           } else {
              if (r.toString().indexOf("exec")<0) {
                 expresion.setText(s);
                 expresion.setSelectionStart(eval.getUltimoToken());
                 expresion.setSelectionEnd(s.length());
              } else {
                 expresion.setText(s);
              }
           }
        }
     }
   }//GEN-LAST:event_expresionActionPerformed
   private boolean ultimo=true;
   private void expresionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expresionKeyPressed
     if (eval.hist.getItemCount()>0) {
        if (evt.getKeyCode()==KeyEvent.VK_UP) {
           if (historico.getSelectedRow()<0) {
              historico.setRowSelectionInterval(historico.getRowCount(), historico.getRowCount());
              expresion.setText(((DefaultTableModel)historico.getModel()).getValueAt(historico.getRowCount()-1, 0).toString());
           } else if (historico.getSelectedRow()>=0) {
              if (!ultimo) {
                 historico.setRowSelectionInterval(historico.getSelectedRow()-1,historico.getSelectedRow()-1);
              } else {
                 ultimo=false;
              }
              expresion.setText(((DefaultTableModel)historico.getModel()).getValueAt(historico.getSelectedRow(), 0).toString());
           } else {
              getToolkit().beep();
           }
        } else if (evt.getKeyCode()==KeyEvent.VK_DOWN) {
           if (historico.getSelectedRow()<historico.getRowCount()-1) {
              if (historico.getSelectedRow()<historico.getRowCount()-1) {
                 historico.setRowSelectionInterval(historico.getSelectedRow()+1,historico.getSelectedRow()+1);
              }
              expresion.setText(((DefaultTableModel)historico.getModel()).getValueAt(historico.getSelectedRow(), 0).toString());
           } else {
              getToolkit().beep();
           }
        } else if (evt.getKeyCode()==KeyEvent.VK_ESCAPE) {
           //historico.select(-1);
           expresion.setText("");
        } else {
           ultimo=true;
        }

     }
      
   }//GEN-LAST:event_expresionKeyPressed

   private void calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularActionPerformed
      expresionActionPerformed(evt);
   }//GEN-LAST:event_calcularActionPerformed

   private void salvarVariablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarVariablesActionPerformed
        DataOutputStream outStream;
        Frame frame=new Frame();
        FileDialog fichero=new FileDialog(frame,"Salvar variables en: ",
                                                               FileDialog.SAVE);
        fichero.show();
        if (fichero.getFile()!=null) {
           try {
              outStream= new DataOutputStream(new FileOutputStream(fichero.getDirectory()+
                                                            fichero.getFile()));
              try {
                 String s;
                 for(int i=0;i<eval.getTablaSimbolos().getNumSimbolos();i++) {
                    s="";
                    s+=eval.getTablaSimbolos().getSimbolo(i).nombre+"="+eval.getTablaSimbolos().getSimbolo(i);
                    //s+=variables.getValueAt(i,0)+"="+variables.getValueAt(i,1);
                    outStream.writeBytes(s+(char) ctes_eval.FIN+"\n");
                 }
                 outStream.close();
              } catch (IOException ex) {
                 evaluador.cuadro_mensaje("Error escribiendo en "+
                                                              fichero.getFile(),
                                          "Mensaje de Error");
              }
           } catch (IOException ex) {
              evaluador.cuadro_mensaje("Error al Abrir Fichero "+
                                                              fichero.getFile(),
                                       "Mensaje de Error");
           }
        }
   }//GEN-LAST:event_salvarVariablesActionPerformed

   private void cargarVariablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarVariablesActionPerformed
             Frame frame=new Frame();
        FileDialog fichero=new FileDialog(frame,"Cargar Variables desde: ",
                                                               FileDialog.LOAD);
        fichero.show();
        if (fichero.getFile()!=null) {
           if (!eval.abrirFichero(fichero.getDirectory()+fichero.getFile())) {
              evaluador.cuadro_mensaje("Error al abrir el fichero "+
                                                              fichero.getFile(),
                                       "Mensaje de Error");
              return;
           }
           String prg=eval.getContenidoFichero(fichero.getDirectory()+fichero.getFile());
           variable r=eval.programa(prg);
           if (r.tipo=='E') {
             evaluador.cuadro_mensaje("Error al cargar variables del fichero: "+
                                           fichero.getFile()+" : "+r.toString(),
                             "Mensaje de Error");
           }
        }
   }//GEN-LAST:event_cargarVariablesActionPerformed

   private void historicoAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historicoAddActionPerformed
      expresion.setText(historico.getModel().getValueAt(historico.getSelectedRow(), 0).toString().trim());
   }//GEN-LAST:event_historicoAddActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox actualizarVariables;
    private javax.swing.JButton borrarExpresion;
    private javax.swing.JButton borrarResultado;
    private javax.swing.JButton calcular;
    private javax.swing.JButton cargarVariables;
    private javax.swing.JTextField expresion;
    private javax.swing.JTable funciones;
    private javax.swing.JButton funcionesAdd;
    private javax.swing.JButton funcionesConcatenar;
    private javax.swing.JTable historico;
    private javax.swing.JButton historicoAdd;
    private javax.swing.JButton historicoConcatenar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField resultado;
    private javax.swing.JTable salidaProgramas;
    private javax.swing.JButton salvarVariables;
    private javax.swing.JTable variables;
    // End of variables declaration//GEN-END:variables
    mieval.evaluador eval=new mieval.evaluador();
    public void expresionSetFocus() {
       expresion.grabFocus();
       expresion.requestFocus();
    }
    public static void main(String args[]) {
        try {
           //Correcion hecha por Chuster Boy ;)
           //UIManager.setLookAndFeel("net.sourceforge.napkinlaf.NapkinLookAndFeel");
               //UIManager.setLookAndFeel(new InfoNodeLookAndFeel());
               //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
               //UIManager.setLookAndFeel(new net.infonode.gui.laf.InfoNodeLookAndFeel());
                 //UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
                 //UIManager.setLookAndFeel(new com.sun.java.swing.plaf.gtk.GTKLookAndFeel());
                 UIManager.setLookAndFeel(new com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel());



        }
        catch (Exception e)
        {
           e.printStackTrace();
        }

        JFrame j=new JFrame();
        panelCalc pC=new panelCalc();
        j.setTitle("Calculadora Científica/Programable (c) 1999-2011 F.J.Criado");
        j.getContentPane().add(pC, java.awt.BorderLayout.CENTER);
        j.add(pC);
        j.setSize(pC.getPreferredSize());

        j.addWindowListener(new WindowAdapter() {
         public void windowClosing(WindowEvent e) {
            System.exit(0);
         }
        });
        j.setVisible(true);



    }
}
