parameters a,i,*numPermutaciones;

if (type(a)!="M" || type(i)!="D") {
   return "Error: tipos de parámetros incorrectos";
}
numPermutaciones=0;
for(d=i; d<len(a) && d<len(a[0]); d++) {
   for(k=i; k<len(a) && a[k][d]==0.0; k++){}
   if (k<len(a)) {
      a=permutarFila(a,i,k);
      numPermutaciones++;
      if (d!=i) {
         a=permutarColumna(a,d,i);
         numPermutaciones++;
      }
      return a;
   }
}
return a;
//    private int permutarFilaSinCero(int i) {//busca una fila sin cero y la permutar por la i
//        int d, k, numPermutaciones=0;
//        for(d=i; d<filas() && d<cols(); d++) {
//            for(k=i; k<filas() && m[k][d]==0.0; k++);
//            if (k<filas()) {
//                _permutarFila(i,k);
//                numPermutaciones++;
//                if (d!=i) {
//                    _permutarColumna(d,i);
//                    numPermutaciones++;
//                }
//                return numPermutaciones;
//            }
//        }
//        return numPermutaciones;
//}
//busca la primera fila que no tiene un cero en el elemento [d][d]
//y la permuta a la fila i